rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ===== HELPER FUNCTIONS =====
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Get user's role from family document (simplified for testing)
    function getUserRole() {
      // For now, return 'principal' for all authenticated users while we test
      // TODO: Implement proper family lookup
      return 'principal';
    }
    
    // Check if user is family member (simplified for testing)
    function isFamilyMember(familyId) {
      // For now, allow all authenticated users access while we test
      // TODO: Implement proper family membership check
      return isAuthenticated();
    }
    
    // Simplified permission checks
    function isPrincipal() {
      return getUserRole() == 'principal';
    }
    
    function isAdmin() {
      let role = getUserRole();
      return role == 'principal' || role == 'co-principal' || role == 'partner';
    }
    
    function canViewFinancials() {
      let role = getUserRole();
      return role in ['principal', 'co-principal', 'partner', 'parent', 'advisor', 'accountant'];
    }
    
    function canManageTransactions() {
      let role = getUserRole();
      return role in ['principal', 'co-principal', 'partner'];
    }
    
    function canManageFamily() {
      return isAdmin();
    }
    
    // ===== USER PROFILES =====
    
    match /users/{userId} {
      allow read: if isOwner(userId) || canViewFinancials();
      allow write: if isOwner(userId) || isAdmin();
      
      // User subcollections - this is the key fix!
      match /transactions/{transactionId} {
        allow read, write: if isOwner(userId);
        allow create: if isOwner(userId);
      }
      
      match /budgets/{budgetId} {
        allow read, write: if isOwner(userId);
        allow create: if isOwner(userId);
      }
      
      match /goals/{goalId} {
        allow read, write: if isOwner(userId);
        allow create: if isOwner(userId);
      }
      
      match /categories/{categoryId} {
        allow read, write: if isOwner(userId);
        allow create: if isOwner(userId);
      }
      
      match /accounts/{accountId} {
        allow read, write: if isOwner(userId);
        allow create: if isOwner(userId);
      }
      
      match /assets/{assetId} {
        allow read, write: if isOwner(userId);
        allow create: if isOwner(userId);
      }
      
      match /liabilities/{liabilityId} {
        allow read, write: if isOwner(userId);
        allow create: if isOwner(userId);
      }
      
      match /debts/{debtId} {
        allow read, write: if isOwner(userId);
        allow create: if isOwner(userId);
      }
      
      match /custom_roles/{roleId} {
        allow read, write: if isOwner(userId);
        allow create: if isOwner(userId);
      }
      
      match /audit_logs/{logId} {
        allow read, write: if isOwner(userId);
        allow create: if isOwner(userId);
      }
      
      match /notifications/{notificationId} {
        allow read, write: if isOwner(userId);
        allow create: if isOwner(userId);
      }
      
      match /settings/{settingId} {
        allow read, write: if isOwner(userId);
        allow create: if isOwner(userId);
      }
    }
    
    // ===== FAMILY MANAGEMENT =====
    
    // Family documents
    match /families/{familyId} {
      allow read: if isAuthenticated() && isFamilyMember(familyId);
      allow create: if isAuthenticated() && request.auth.uid == familyId;
      allow update: if isAuthenticated() && isFamilyMember(familyId) && canManageFamily();
      allow delete: if isAuthenticated() && isPrincipal();
    }
    
    // Family invitations (separate collection)
    match /family_invitations/{invitationId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && canManageFamily();
      allow update: if isAuthenticated() && 
        (resource.data.invitedEmail == request.auth.token.email || canManageFamily());
      allow delete: if isAuthenticated() && canManageFamily();
    }
    
    // ===== LEGACY SUPPORT (for backwards compatibility) =====
    
    // Top-level collections with userId field (old structure)
    match /transactions/{transactionId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) ||
        (canViewFinancials() && resource.data.isPrivate != true)
      );
      
      allow create: if isAuthenticated() && 
        canManageTransactions() &&
        request.auth.uid == resource.data.userId;
      
      allow update: if isAuthenticated() && (
        isOwner(resource.data.userId) || canManageTransactions()
      );
      
      allow delete: if isAuthenticated() && (
        isOwner(resource.data.userId) || isAdmin()
      );
    }
    
    // Goals with family sharing
    match /goals/{goalId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) ||
        canViewFinancials() ||
        (resource.data.isShared == true && isFamilyMember(resource.data.familyId))
      );
      
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        isOwner(resource.data.userId) || isAdmin()
      );
      allow delete: if isAuthenticated() && (
        isOwner(resource.data.userId) || isAdmin()
      );
    }
    
    // Budgets
    match /budgets/{budgetId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) || canViewFinancials()
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        isOwner(resource.data.userId) || canManageTransactions()
      );
      allow delete: if isAuthenticated() && (
        isOwner(resource.data.userId) || isAdmin()
      );
    }
    
    // Categories
    match /categories/{categoryId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) || canViewFinancials()
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        isOwner(resource.data.userId) || canManageTransactions()
      );
      allow delete: if isAuthenticated() && (
        isOwner(resource.data.userId) || isAdmin()
      );
    }
    
    // Accounts/Assets
    match /accounts/{accountId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) || canViewFinancials()
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        isOwner(resource.data.userId) || canManageTransactions()
      );
      allow delete: if isAuthenticated() && (
        isOwner(resource.data.userId) || isAdmin()
      );
    }
    
    // ===== APPROVAL WORKFLOWS =====
    
    match /approvals/{approvalId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.requesterId ||
        request.auth.uid == resource.data.approverId ||
        isAdmin()
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.approverId || isAdmin()
      );
    }
    
    // ===== TEST COLLECTIONS =====
    
    // Test collections for development
    match /test/{document=**} {
      allow read, write: if isAuthenticated();
    }
    
    match /public-test/{document=**} {
      allow read, write: if true;
    }
  }
}